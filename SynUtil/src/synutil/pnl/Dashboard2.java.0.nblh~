/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package synutil.pnl;

import com.jgoodies.binding.adapter.AbstractTableAdapter;
import com.jgoodies.binding.list.ArrayListModel;
import com.lowagie.text.Font;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.ListSelectionModel;
import mijzcx.synapse.desk.utils.Application;
import mijzcx.synapse.desk.utils.CloseDialog;
import mijzcx.synapse.desk.utils.HelpScrollToView;
import mijzcx.synapse.desk.utils.TableWidthUtilities;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.combobox.ListComboBoxModel;

import synutil.output.S1_to;
import synutil.pnl.Dlg_confirm.OutputData;

/**
 *
 * @author i1
 */
public class Dashboard2 extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard2
     */
    public Dashboard2() {
        initComponents();
        myInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pm_table = new javax.swing.JPopupMenu();
        pm_t_delete = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_tables = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_columns = new javax.swing.JTable();
        cb_database = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        tf_password = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        tf_username = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cb_select = new javax.swing.JCheckBox();
        jButton7 = new javax.swing.JButton();
        tf_search = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tf_code = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();

        pm_t_delete.setText("DROP");
        pm_t_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pm_t_deleteActionPerformed(evt);
            }
        });
        pm_table.add(pm_t_delete);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tbl_tables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_tables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_tablesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbl_tablesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl_tablesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_tables);

        tbl_columns.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_columns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_columnsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_columns);

        cb_database.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cb_database.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cb_database.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_databaseActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CHOOSE DATABASE");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tf_password.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tf_password.setText("password");

        jLabel2.setText("PASSWORD:");

        tf_username.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        tf_username.setText("root");

        jLabel3.setText("USER:");

        cb_select.setSelected(true);
        cb_select.setText("UNCHECK ALL");
        cb_select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_selectActionPerformed(evt);
            }
        });

        jButton7.setText("CONNECT");
        jButton7.setFocusable(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        tf_search.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tf_search.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tf_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(cb_database, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                    .addComponent(tf_search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_password, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                            .addComponent(tf_username))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addGap(18, 18, 18)
                        .addComponent(cb_select)
                        .addGap(13, 13, 13)))
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_database, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_select)
                    .addComponent(tf_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tf_search, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("INSERT");
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("UPDATE");
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("DELETE");
        jButton3.setFocusable(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("SELECT- LIST");
        jButton4.setFocusable(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("TABLE");
        jButton5.setFocusable(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton8.setText("TO");
        jButton8.setFocusable(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("SELECT- TO");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton9.setText("TABLE DATA");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("ID INCREMENT");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("CB - DATA");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("ADD/EDIT/DEL");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("CREATE DB");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("CREATE TABLE");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("CODE SNIPPETS");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("CLOSE");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("DROP - DB");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 204, 255));

        tf_code.setColumns(20);
        tf_code.setLineWrap(true);
        tf_code.setRows(5);
        jScrollPane3.setViewportView(tf_code);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
        );

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("SYNAPSE UTILITY - maytopacka");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbl_tablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_tablesMouseClicked
        // TODO add your handling code here:
        data_cols();
    }//GEN-LAST:event_tbl_tablesMouseClicked

    private void tbl_columnsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_columnsMouseClicked
        do_check();
    }//GEN-LAST:event_tbl_columnsMouseClicked

    private void cb_databaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_databaseActionPerformed
        // TODO add your handling code here:
        data_tables();
    }//GEN-LAST:event_cb_databaseActionPerformed

    private void cb_selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_selectActionPerformed
        do_uncheck();
    }//GEN-LAST:event_cb_selectActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        set_database();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void tf_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_searchKeyReleased
        // TODO add your handling code here:
        data_tables();
    }//GEN-LAST:event_tf_searchKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        set_insert();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        set_edit();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        set_delete();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        set_select();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        set_table();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        set_to();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        set_select_to();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        table_data();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        set_increment();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        set_cb_data();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        do_addedit();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        code_snippet();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        create_db();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        del_database();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        add_table();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void tbl_tablesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_tablesMousePressed
        pm_table(evt);
    }//GEN-LAST:event_tbl_tablesMousePressed

    private void tbl_tablesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_tablesMouseReleased
        pm_table(evt);
    }//GEN-LAST:event_tbl_tablesMouseReleased

    private void pm_t_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pm_t_deleteActionPerformed
        delete_table();
    }//GEN-LAST:event_pm_t_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Application.setSystemLookAndFeel();
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
//                new Dashboard2().setVisible(true);
                Dashboard2 aw = new Dashboard2();
                Toolkit tk = Toolkit.getDefaultToolkit();
                int xSize = ((int) tk.getScreenSize().
                        getWidth());
                int ySize = ((int) tk.getScreenSize().
                        getHeight());

                aw.setSize(xSize, ySize);
                aw.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cb_database;
    private javax.swing.JCheckBox cb_select;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem pm_t_delete;
    private javax.swing.JPopupMenu pm_table;
    private javax.swing.JTable tbl_columns;
    private javax.swing.JTable tbl_tables;
    private javax.swing.JTextArea tf_code;
    private javax.swing.JPasswordField tf_password;
    private javax.swing.JTextField tf_search;
    private javax.swing.JTextField tf_username;
    // End of variables declaration//GEN-END:variables

    private void myInit() {
//        init_key();
        set_database();
        init_tbl_tables();
        init_tbl_columns();
    }

    private void set_database() {
        String user = tf_username.getText();
        String password = tf_password.getText();
        cb_database.setModel(new ListComboBoxModel(S1_set.get_databases(user, password)));
        AutoCompleteDecorator.decorate(cb_database);
    }
    private ArrayListModel tbl_table_ALM;
    private Dashboard.TbltableModel tbl_table_M;
////    

    private void init_tbl_tables() {
        tbl_table_ALM = new ArrayListModel();
        tbl_table_M = new Dashboard.TbltableModel(tbl_table_ALM);

        tbl_tables.getTableHeader().
                setPreferredSize(new Dimension(100, 40));
        tbl_tables.setModel(tbl_table_M);
        tbl_tables.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbl_tables.setRowHeight(25);

//        tbl_advances.setAutoResizeMode(0);
        int[] tbl_widths_accounts = {100};

        for (int i = 0, n = tbl_widths_accounts.length; i < n; i++) {
            if (i == 0) {
                continue;
            }
            TableWidthUtilities.setColumnWidth(tbl_tables, i, tbl_widths_accounts[i]);

        }
        Dimension d = tbl_tables.getTableHeader().
                getPreferredSize();
        d.height = 30;
        tbl_tables.getTableHeader().
                setPreferredSize(d);
        tbl_tables.getTableHeader().
                setFont(new java.awt.Font("Arial", Font.BOLD, 12));
        tbl_tables.setRowHeight(35);
        tbl_tables.setFont(new java.awt.Font("Arial", 1, 12));
    }

    private void loadData_tables(List<S1_set.to_tables> acc) {
        tbl_table_ALM.clear();
        tbl_table_ALM.addAll(acc);
    }

    public static class TbltableModel extends AbstractTableAdapter {

        public static String[] COLUMNS = {
            "TABLE"
        };

        public TbltableModel(ListModel listmodel) {
            super(listmodel, COLUMNS);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
//           
//            if (column == 1) {
//                return true;
//            }

            return false;
        }

        @Override
        public Class getColumnClass(int col) {

            return Object.class;
        }

        @Override
        public Object getValueAt(int row, int col) {
            S1_set.to_tables tt = (S1_set.to_tables) getRow(row);

            switch (col) {

                default:
                    return tt.name;
            }
        }
    }

    private void data_tables() {
        if (cb_database.getItemCount() == 0) {
            return;
        }
        String database = cb_database.getSelectedItem().
                toString();
        String user = tf_username.getText();
        String password = tf_password.getText();
        String search = tf_search.getText();
//         JOptionPane.showMessageDialog(null,ad_id);
        loadData_tables(S1_set.get_tables(user, password, database, search));
    }
    private ArrayListModel tbl_colll_ALM;
    private Dashboard.TblcolModel tbl_col_M;
////    

    private void init_tbl_columns() {
        tbl_colll_ALM = new ArrayListModel();
        tbl_col_M = new Dashboard.TblcolModel(tbl_colll_ALM);

        tbl_columns.getTableHeader().
                setPreferredSize(new Dimension(100, 40));

        tbl_columns.setModel(tbl_col_M);
        tbl_columns.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbl_columns.setRowHeight(25);

//        tbl_advances.setAutoResizeMode(0);
        int[] tbl_widths_accounts = {100, 100, 100};

        for (int i = 0, n = tbl_widths_accounts.length; i < n; i++) {
            if (i == 0) {
                continue;
            }
            TableWidthUtilities.setColumnWidth(tbl_columns, i, tbl_widths_accounts[i]);

        }
        Dimension d = tbl_columns.getTableHeader().
                getPreferredSize();
        d.height = 30;
        tbl_columns.getTableHeader().
                setPreferredSize(d);
        tbl_columns.getTableHeader().
                setFont(new java.awt.Font("Arial", Font.BOLD, 12));

        tbl_columns.setRowHeight(35);
        tbl_columns.setFont(new java.awt.Font("Arial", 1, 12));
    }

    private void loadData_advances(List<S1_set.to_col> acc) {
        tbl_colll_ALM.clear();
        tbl_colll_ALM.addAll(acc);
    }

    public static class TblcolModel extends AbstractTableAdapter {

        public static String[] COLUMNS = {
            "NAME", "TYPE", "STATUS"
        };

        public TblcolModel(ListModel listmodel) {
            super(listmodel, COLUMNS);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
//           
//            if (column == 1) {
//                return true;
//            }

            return false;
        }

        @Override
        public Class getColumnClass(int col) {

            if (col == 2) {
                return Boolean.class;
            }
            return Object.class;
        }

        @Override
        public Object getValueAt(int row, int col) {
            S1_set.to_col tt = (S1_set.to_col) getRow(row);

            switch (col) {
                case 0:
                    return tt.name;
                case 1:
                    return tt.type;


                default:
                    return tt.check;
            }
        }
    }

    private void data_cols() {
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        String database = cb_database.getSelectedItem().
                toString();
        String user = tf_username.getText();
        String password = tf_password.getText();
        String search = tf_search.getText();
        loadData_advances(S1_set.get_columns(user, password, database, table_name));
    }

    private void do_check() {
        int row = tbl_columns.getSelectedRow();
        if (row < 0) {
            return;
        }
        boolean check = Boolean.parseBoolean(tbl_columns.getModel().
                getValueAt(row, 2).
                toString());

        if (check == false) {
            check = true;
        } else {
            check = false;
        }

        S1_set.to_col order = (S1_set.to_col) tbl_colll_ALM.get(tbl_columns.
                convertRowIndexToModel(row));
        order.setCheck(check);

        tbl_col_M.fireTableDataChanged();

        tbl_columns.getSelectionModel().
                setSelectionInterval(row, row);
        HelpScrollToView.view(row, tbl_columns);

    }

    private void do_uncheck() {

        int row = tbl_columns.getRowCount();
        if (row == 0) {
            return;
        }
        boolean check = false;
        if (cb_select.getText().
                equals("UNCHECK ALL")) {
            check = false;
            cb_select.setText("CHECK ALL");
        } else {
            check = true;
            cb_select.setText("UNCHECK ALL");
        }
        for (int i = 0; i < row; i++) {

            S1_set.to_col order = (S1_set.to_col) tbl_colll_ALM.get(tbl_columns.
                    convertRowIndexToModel(i));
            order.setCheck(check);

            tbl_col_M.fireTableDataChanged();
        }
    }

    private void set_to() {
        List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        String database = cb_database.getSelectedItem().
                toString();

        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }
        String text = S1_to.set_to(datas2, database, table_name);
        tf_code.setText(text);
    }

    private void set_insert() {
        List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        String database = cb_database.getSelectedItem().
                toString();

        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }

        String text = S1_to.insert(datas2, database, table_name);
        tf_code.setText(text);
    }

    private void set_edit() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();

        List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }

        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }

        Window p = (Window) this;
        Dlg_where2 nd = Dlg_where2.create(p, true);
        nd.setTitle("");
        nd.do_pass(pass, table_name);
        nd.setCallback(new Dlg_where2.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_where2.OutputData data) {
                String text = S1_to.edit(datas2, database, table_name, data.to_types);
                tf_code.setText(text);
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);
    }

    private void set_delete() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }

        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }

        Window p = (Window) this;
        Dlg_where2 nd = Dlg_where2.create(p, true);
        nd.setTitle("");
        nd.do_pass(pass, table_name);
        nd.setCallback(new Dlg_where2.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_where2.OutputData data) {
                String text = S1_to.delete(datas2, database, table_name, data.to_types);
                tf_code.setText(text);
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);

    }

    private void set_table() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        String text = S1_to.table(datas, database, table_name, new ArrayList());
        tf_code.setText(text);
    }

    private void set_select() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }
        Window p = (Window) this;
        Dlg_where2 nd = Dlg_where2.create(p, true);
        nd.setTitle("");
        nd.do_pass(pass, table_name);
        nd.setCallback(new Dlg_where2.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_where2.OutputData data) {
                String text = S1_to.select_list(datas, database, table_name, data.to_types);
                tf_code.setText(text);
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);

    }

    private void set_select_to() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }
        Window p = (Window) this;
        Dlg_where2 nd = Dlg_where2.create(p, true);
        nd.setTitle("");
        nd.do_pass(pass, table_name);
        nd.setCallback(new Dlg_where2.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_where2.OutputData data) {
                String text = S1_to.select_to(datas, database, table_name, data.to_types);
                tf_code.setText(text);
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);

    }

    private void table_data() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }
        String text = S1_to.data_table(datas, database, table_name);
        tf_code.setText(text);


    }

    private void set_increment() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }

        String text = S1_to.increment_id(database, table_name);
        tf_code.setText(text);
    }

    private void set_cb_data() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }

        String text = S1_to.cb_data(database, table_name);
        tf_code.setText(text);
    }

    private void do_addedit() {
        final List<S1_set.to_col> datas = tbl_colll_ALM;
        if (datas.isEmpty()) {
            return;
        }
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        final List<String> pass = new ArrayList();
        for (S1_set.to_col t : datas) {
//            if (t.check == true) {
            pass.add(t.name);
//            }

        }
        final List<S1_set.to_col> datas2 = new ArrayList();
        for (S1_set.to_col t : datas) {
            if (t.check == true) {
                S1_set.to_col t1 = new S1_set.to_col(t.name, t.type, true);
                datas2.add(t1);
            }
        }
        String text = S1_to.addedit(datas, database, table_name);
        tf_code.setText(text);
    }

    private void code_snippet() {
        Window p = (Window) this;
        Dlg_snippets nd = Dlg_snippets.create(p, true);
        nd.setTitle("");
        nd.do_pass();
        nd.setCallback(new Dlg_snippets.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_snippets.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);
    }

    private void create_db() {
        Window p = (Window) this;
        Dlg_name nd = Dlg_name.create(p, true);
        nd.setTitle("");
        nd.do_pass(tf_username.getText(), tf_password.getText());
        nd.setCallback(new Dlg_name.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_name.OutputData data) {
                closeDialog.ok();
                create_database(data.name, data.stat);
                String text = "";
                text = text + "drop database if exists " + data.name + "; \n";
                text = text + "create database " + data.name + ";";
                tf_code.setText(text);
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);
    }

    private void create_database(String db_name, int stat) {
        S1_set.add_database(tf_username.getText(), tf_password.getText(), db_name, stat);
        set_database();
    }

    private void del_database() {
        if (cb_database.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Cannot Drop Database");
            return;
        }
        Window p = (Window) this;
        Dlg_confirm nd = Dlg_confirm.create(p, true);
        nd.setTitle("");
        nd.do_pass("Sure Dyud ka nga e Drop dyud nimo?");
        nd.setCallback(new Dlg_confirm.Callback() {

            @Override
            public void cancel(CloseDialog closeDialog, OutputData data) {
                closeDialog.ok();
            }

            @Override
            public void cont(CloseDialog closeDialog, OutputData data) {
                closeDialog.ok();
                S1_set.delete_database(tf_username.getText(), tf_password.
                        getText(), cb_database.getSelectedItem().
                        toString());
                set_database();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void add_table() {
        final String database = cb_database.getSelectedItem().
                toString();
        Window p = (Window) this;
        Dlg_add_table nd = Dlg_add_table.create(p, true);
        nd.setTitle("");
        nd.do_pass(tf_username.getText(), tf_password.getText(), database);
        nd.setCallback(new Dlg_add_table.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_add_table.OutputData data) {
                closeDialog.ok();
                tf_code.setText(data.text2);
                S1_set.add_table(tf_username.getText(), tf_password.getText(), database, data.text);
                data_tables();

            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void delete_table() {
        int row = tbl_tables.getSelectedRow();
        if (row < 0) {
            return;
        }

        final String table_name = tbl_tables.getModel().
                getValueAt(row, 0).
                toString();
        final String database = cb_database.getSelectedItem().
                toString();
        Window p = (Window) this;
        Dlg_confirm nd = Dlg_confirm.create(p, true);
        nd.setTitle("");
        nd.do_pass("Sure Dyud ka nga e drop?");
        nd.setCallback(new Dlg_confirm.Callback() {

            @Override
            public void cancel(CloseDialog closeDialog, OutputData data) {
                closeDialog.ok();
            }

            @Override
            public void cont(CloseDialog closeDialog, OutputData data) {
                closeDialog.ok();
                S1_set.delete_table(tf_username.getText(), tf_password.getText(), database, table_name);
                data_tables();
                tbl_colll_ALM.clear();
                tbl_col_M.fireTableDataChanged();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void pm_table(MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            pm_table.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }
}
